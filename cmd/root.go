package cmd

import (
	"fmt"
	"io/ioutil"
	"os"

	"github.com/Sterrenhemel/ddl2struct/pkg/parser"
	_ "github.com/Sterrenhemel/ddl2struct/pkg/parser_driver"

	"github.com/spf13/cobra"
)

var cfgFile string
var (
	inputPath  string
	outputPath string
	tableName  string
)

var rootCmd = &cobra.Command{
	Use:   "ddl2struct",
	Short: "create golang struct from ddl",
	Long:  ``,
	Run:   runCommand,
}

func Execute() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func init() {
	flag := rootCmd.PersistentFlags()
	flag.StringVarP(&inputPath, "input", "i", "", `sql file path`)
	flag.StringVarP(&outputPath, "output", "o", "", `output file path`)
}

func runCommand(cmd *cobra.Command, args []string) {
	sql, err := ioutil.ReadFile(inputPath)
	if err != nil {
		panic(err)
	}

	parser := parser.New()
	if err := parser.Parse(string(sql)); err != nil {
		panic(err)
	}

	structBytes, err := parser.ToStructs(true)
	if err != nil {
		panic(err)
	}

	if outputPath != "" {
		if err := ioutil.WriteFile(outputPath, structBytes, 0644); err != nil {
			panic(err)
		}
	}

	fmt.Printf(`// Code generated by DDL2STRUCT. DO NOT EDIT.
// InputFile: %s
%s

`, inputPath, structBytes)
}

func generateFileFromBytes(structBytes []byte) {
	if err := ioutil.WriteFile(outputPath, structBytes, 0644); err != nil {
		panic(err)
	}
}
